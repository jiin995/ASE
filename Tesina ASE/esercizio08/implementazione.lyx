#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Implementazione
\end_layout

\begin_layout Standard
Si è deciso di implementare il componente 
\shape italic
carry_look_ahead_adder
\shape default
 direttamente in forma generica, permettendo di specificare il numero di
 bit delle stringhe tramite parametro generico 
\shape italic
width
\shape default
.
 Per l'implementazione, si è utilizzata una descrizione di tipo structural.
 Di seguito vengono riportati i componenti utilizzati.
\end_layout

\begin_layout Subsection
Propagation/Generation calculator
\end_layout

\begin_layout Standard
L'implementazione di questo componente è stata realizzata tramite descrizione
 dataflow.
 In particolare, di seguito è riportata la parte di codice relativa alla
 generazione delle condizioni di propagazione e generazione:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Descrizione dataflow del Propagation/Ge
neration calculator.}]
\end_layout

\begin_layout Plain Layout

architecture dataflow of propagation_generation_calculator is 
\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

	G <= X and Y;
\end_layout

\begin_layout Plain Layout

	P <= X or Y;
\end_layout

\begin_layout Plain Layout

end;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
L'implementazione completa è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio08/design/propagation_generation_calculator.vhd}{%
\end_layout

\begin_layout Plain Layout

propagation
\backslash
_generation
\backslash
_calculator.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Carry Look Ahead Adder
\end_layout

\begin_layout Standard
Per realizzare l'addizionatore, oltre al propagation/generation calculator,
 si sono utilizzati altri due componenti generati tramite costrutto generate:
 
\shape italic
carry_look_ahead
\shape default
, per il calcolo dei riporti, e 
\shape italic
full_adders
\shape default
 per la rete di full adder atta al calcolo delle somme:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Generazione del carry_look_ahead
 e dei full adder.}]
\end_layout

\begin_layout Plain Layout

carry_look_ahead: for i in 0 to (width-1) generate
\end_layout

\begin_layout Plain Layout

	carry_ahead :
\end_layout

\begin_layout Plain Layout

		C(i+1) <= G(i) or (P(i) and C(i));
\end_layout

\begin_layout Plain Layout

end generate carry_look_ahead;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

full_adders: for i in 0 to (width-1) generate
\end_layout

\begin_layout Plain Layout

	fullAdder : full_adder port map (   
\end_layout

\begin_layout Plain Layout

		x => X(i),                                             
\end_layout

\begin_layout Plain Layout

		y => Y(i),                                             
\end_layout

\begin_layout Plain Layout

		c_in => C (i),                                             
\end_layout

\begin_layout Plain Layout

		s => S_TEMP(i) 
\end_layout

\begin_layout Plain Layout

	); 
\end_layout

\begin_layout Plain Layout

end generate full_adders;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Si noti come, all'interno del port map di ciascun full_adder, non siano
 stati utilizzati i riporti in uscita 
\shape italic
c_out
\shape default
, dal momento che tali riporti sono già stati calcolati precedentemente
 dal 
\shape italic
carry_look_ahead.

\shape default
 L'implementazione completa è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio08/design/carry_look_ahead_adder.vhd}{%
\end_layout

\begin_layout Plain Layout

carry
\backslash
_look
\backslash
_ahead
\backslash
_adder.vhd}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
