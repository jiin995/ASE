#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Moltiplicatore di Robertson
\end_layout

\begin_layout Subsection
Architettura
\end_layout

\begin_layout Standard
Per poter realizzare un moltiplicatore di Robertson in grado di implementare
 l'algoritmo di Robertson si è fatto riferimento al modello PO/PC utilizzando
 i seguenti componenti:
\end_layout

\begin_layout Itemize
Unità di controllo
\end_layout

\begin_layout Itemize
Contatore
\end_layout

\begin_layout Itemize
Registro M (per contenere il moltiplicando X)
\end_layout

\begin_layout Itemize
Registri A e Q scan chain (per contenere rispettivamente i risultati parziali
 e il moltiplicatore Y)
\end_layout

\begin_layout Itemize
Un flip flop F
\end_layout

\begin_layout Itemize
Un addizionatore parallelo: Carry Select add/sub
\end_layout

\begin_layout Itemize
Porte XOR
\end_layout

\begin_layout Itemize
Un multiplexer
\end_layout

\begin_layout Standard
Lo schema strutturale è riportato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:architettura-robertson"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/architettura_robertson.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:architettura-robertson"

\end_inset

Architettura del moltiplicatore di Robertson.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Essendo il moltiplicatore di Robertson una macchina sequenziale, sono stati
 dapprima definiti gli stati della macchina per la realizzazione della parte
 di controllo.
 L'automa a stati finiti è raffigurato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:architettura-robertson-fsm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 e prevede i seguenti stati:
\end_layout

\begin_layout Itemize
Idle: la macchina permane in questo stato finchè non giunge un segnale di
 
\shape italic
start;
\end_layout

\begin_layout Itemize
Init: in questo stato vengono inizializzati i registri e si resetta il contatore
;
\end_layout

\begin_layout Itemize
Choice: in questo stato si sceglie l'operazione da fare in base al valore
 di 
\shape italic
counter_hit, x_sign
\shape default
 e 
\shape italic
q0
\shape default
;
\end_layout

\begin_layout Itemize
Right_Shift: in questo stato viene effettuato lo shift dei registri A e
 Q e viene salvato il valore di 
\shape italic
x_sign
\shape default
;
\end_layout

\begin_layout Itemize
Add_Sub: in questo stato si effettua un'operazione di somma tra A (registro
 di accumulazione) ed M; nel caso in cui il moltiplicando X sia negativo
 e 
\shape italic
counter_hit 
\shape default
sia alto (fine dell'operazione di moltiplicazione) si effettuerà una sottrazione
 A-M (operazione di correzione).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/architettura_robertson_fsm.png
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:architettura-robertson-fsm"

\end_inset

Automa a stati finiti (moltiplicatore di Robertson).
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Implementazione
\end_layout

\begin_layout Standard
Per l'implementazione di tale componente si è utilizzata una descrizione
 di tipo structural, collegando opportunamene i componenti descritti precedentem
ente.
 In particolare si riporta l'interfaccia del componente moltiplicatore:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Implementazione del moltiplicatore
 di Robertson.}]
\end_layout

\begin_layout Plain Layout

entity robertson_multiplier is     
\end_layout

\begin_layout Plain Layout

	GENERIC (N : INTEGER :=  8);     
\end_layout

\begin_layout Plain Layout

	PORT (
\end_layout

\begin_layout Plain Layout

		X : in STD_LOGIC_VECTOR (N-1 downto 0);                 
\end_layout

\begin_layout Plain Layout

		Y : in STD_LOGIC_VECTOR (N-1 downto 0);                
\end_layout

\begin_layout Plain Layout

		start : in STD_LOGIC;                
\end_layout

\begin_layout Plain Layout

		clock : in STD_LOGIC;                
\end_layout

\begin_layout Plain Layout

		reset_n : in STD_LOGIC;                 
\end_layout

\begin_layout Plain Layout

		stop : out STD_LOGIC;                 
\end_layout

\begin_layout Plain Layout

		Z : out STD_LOGIC_VECTOR ((2*N)-1 downto 0));
\end_layout

\begin_layout Plain Layout

end robertson_multiplier;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
L'implementazione completa del moltiplicatore è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio11/design/robertson_multiplier.vhd}{%
\end_layout

\begin_layout Plain Layout

robertson
\backslash
_multiplier.vhd}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Parte di controllo
\end_layout

\begin_layout Standard
In particolare, per quanto riguarda la parte di controllo, questa è stata
 realizzata mediante una control_unit implementata come FSM in descrizione
 behavioural, seguendo l'automa a stati finiti visto precedentemente.
 Di seguito è riportato il comportamento della macchina nello stato di 
\shape italic
choice
\shape default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Implementazione dello stato di
 choice del moltiplicatore di Robertson.}]
\end_layout

\begin_layout Plain Layout

when choice => 						  
\end_layout

\begin_layout Plain Layout

	if counter_hit = '0' then                 	  		
\end_layout

\begin_layout Plain Layout

		if current_multiplicand = '0' then   								
\end_layout

\begin_layout Plain Layout

			nxt <= right_shift;               							  
\end_layout

\begin_layout Plain Layout

		else                                  								
\end_layout

\begin_layout Plain Layout

			nxt <= add_sub;                  							  
\end_layout

\begin_layout Plain Layout

		end if; 							
\end_layout

\begin_layout Plain Layout

	else                                      	
\end_layout

\begin_layout Plain Layout

		if x_sign = '0' then                  					
\end_layout

\begin_layout Plain Layout

		nxt <= idle;                         	
\end_layout

\begin_layout Plain Layout

	else                                      	
\end_layout

\begin_layout Plain Layout

		nxt <= add_sub;                      		
\end_layout

\begin_layout Plain Layout

		end if; 							
\end_layout

\begin_layout Plain Layout

	end if;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
L'intera implementazione dell'unita di controllo del moltiplicatore di Robertson
 è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio11/design/robertson_control_unit.vhd}{%
\end_layout

\begin_layout Plain Layout

robertson
\backslash
_control
\backslash
_unit.vhd}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Parte operativa
\end_layout

\begin_layout Standard
Il funzionamento della parte operativa è il seguente: inizialmente, il moltiplic
ando X e il moltiplicatore Y vengono caricati rispettivamente nei registri
 Q e M.
 In testa al registro M, invece, viene posto il flip flop F che determina
 il valore da inserire in M in caso di shift a destra: F sarà alto se e
 solo se sono entrambi alti M[N-1] e Q[0] (moltiplicatore negativo con operazion
e di somma), e resterà alto per tutta la durata dell'operazione:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Determinazione di F.}]
\end_layout

\begin_layout Plain Layout

F: F_in <= ((internal_m(N-1) and internal_q(0)) or F_out);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Le operazioni di somma vengono effettuate utilizzando il Carry Select Add/Sub,
 che si occuperà di sommare il contenuto del registro A (somma parziale)
 con M, il complemento di M o un vettore di zeri a seconda della modalità
 di funzionamento determinata dalla control unit.
 Per effettuare il complemento, si utilizza una porta XOR in uscita ad un
 multiplexer il cui segnale di selezione è pilotato dalla control unit.
 Per quanto concerne l'uscita, questa sarà determinata dalla concatenazione
 di A e Q (N+M bit):
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Determinazione di Z.}]
\end_layout

\begin_layout Plain Layout

Z <= internal_a & internal_q; 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Simulazione e sintesi
\end_layout

\begin_layout Standard
Per tale componente è stata effettuata una simulazione behavioural: i valori
 di X e Y sono stati posti, rispettivamente, a -9 e 70.
 Una volta dato lo start, la macchina inizia ad effettuare le dovute operazioni
 fino a quando stop non diventa alto e in Z viene riportato il risultato
 corretto.
 I risultati ottenuti sono osservabili in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:simulazione-mac-1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/simulazione_robertson.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:simulazione-mac-1"

\end_inset

Simulazione behavioural del moltiplicatore di Robertson.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Si è proceduto infine alla sintesi del componente utilizzando diversi valori
 di lunghezza delle stringhe di bit.
 Essendo tale macchina sequenzale e dunque clockata, piuttosto che il
\shape italic
 maximum combinational path delay
\shape default
 è stato valutato il 
\shape italic
minimum period
\shape default
 di funzionamento (ossia l'inverso della frequenza massima).
 I risultati sono riportati in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:grafici-sintesi-robertson"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{figure}  
\end_layout

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}  
\end_layout

\begin_layout Plain Layout


\backslash
begin{groupplot}[group style={group size=2 by 1,horizontal sep=2cm}, yticklabel
 style={font=
\backslash
footnotesize}, xticklabel style={font=
\backslash
footnotesize}]
\end_layout

\begin_layout Plain Layout


\backslash
nextgroupplot[legend style={font=
\backslash
fontsize{4}{5}
\end_layout

\begin_layout Plain Layout


\backslash
selectfont, anchor=north, at={(0.70,0.16)}}, xmin=0,xmax=128, ymin = 0, ymax
 = 40000, grid=major, width=0.45
\end_layout

\begin_layout Plain Layout


\backslash
textwidth, height=
\backslash
axisdefaultheight,xlabel= Numero di bit, ylabel=Numero di slice] 
\end_layout

\begin_layout Plain Layout


\backslash
addplot coordinates{     (0,0) (4, 50) (8, 88) (16, 164) (32, 321) (64,
 608) (128, 1223)     }; 
\end_layout

\begin_layout Plain Layout


\backslash
nextgroupplot[legend style={anchor=north, at={(0.50,0.95)}}, xmin=0,xmax=128,
 ymin = 0, ymax = 290, grid=major, width=0.45
\backslash
textwidth, height=
\backslash
axisdefaultheight, xlabel= Numero di bit, ylabel=Minimum period (ns)] 
\backslash
addplot coordinates{     (0,0) (4, 2.352) (8, 3.151) (16, 4.070) (32, 4.660)
 (64, 5.775) (128, 6.459)     };
\end_layout

\begin_layout Plain Layout


\backslash
end{groupplot}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\begin_layout Plain Layout


\backslash
caption{Grafici dei risultati ottenuti post-sintesi in funzione del numero
 di bit.} 
\end_layout

\begin_layout Plain Layout


\backslash
label{fig:grafici-sintesi-robertson}
\end_layout

\begin_layout Plain Layout


\backslash
end{figure}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Per tale sintesi, ISE ha scelto come algoritmo ottimale di codifica degli
 stati quello 
\shape italic
Sequential
\shape default
.
 I risultati ottenuti mostrano come l'area occupata sia nettamente inferiore
 rispetto al caso MAC, arrivando addirittura ad un numero di slice circa
 35 volte inferiore nel caso dei 128 bit.
\end_layout

\end_body
\end_document
