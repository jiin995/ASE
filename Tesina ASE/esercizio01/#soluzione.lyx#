#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Descrivere la soluzione relizzata per mezzo di schematici e riportare il
 codice dei soli componenti significativi.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Esercizio 1
\end_layout

\begin_layout Standard
Si progetti una macchina M che, data una parola X di 6 bit in ingresso (X
\begin_inset script subscript

\begin_layout Plain Layout
5
\end_layout

\end_inset

X
\begin_inset script subscript

\begin_layout Plain Layout
4
\end_layout

\end_inset

X
\begin_inset script subscript

\begin_layout Plain Layout
3
\end_layout

\end_inset

X
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

X
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

X
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

), restituisca una parola Y di 3 bit (Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

Y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

) che rappresenta la codifica binaria del 
\series bold
numero di bit alti in X.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La macchina da progettare non è altro che un contatore parallelo con 6 ingressi
 e 3 uscite, che coincide con il numero minino di uscite necessarie per
 codificare il risultato dell'operazione di conteggio.
\end_layout

\begin_layout Standard
Utilizzando una rappresentazione 4-2-1 per l'uscita 
\series bold
Y
\series default
, si riportano gli ON-SET ottenuti per ogni uscita:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\series bold
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
2
\end_layout

\end_inset

:
\series default
 ON-SET = {15, 23, 27, 29, 30, 31, 39, 43, 45, 46, 47, 51, 53, 54, 55, 57,
 58, 59, 60, 61, 62, 63};
\end_layout

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
1
\end_layout

\end_inset

:
\series default
 ON-SET = {3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24,
 25, 26, 28, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 48, 52, 56, 63};
\end_layout

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
0
\end_layout

\end_inset

:
\series default
 ON-SET = {1, 2, 4, 7, 8, 11, 13, 14, 16, 19, 21, 22, 25, 26, 28, 31, 32,
 35, 37, 38, 41, 42, 44, 47, 49, 50, 52, 55, 56, 59, 61, 62}.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Esercizio 2
\end_layout

\begin_layout Standard
Si derivi la forma minima (
\series bold
SOP
\series default
) per ciascuna delle variabili in uscita dalla macchina M (considerate separatam
ente l’una dall’altra) utilizzando lo strumento 
\series bold
SIS
\series default
, e si confronti la soluzione trovata dal tool con quella ricavabile con
 una procedura esatta manuale (Karnaugh o Mc-Cluskey).
 Per una delle uscite si effettui anche il 
\series bold
mapping
\series default
 su una delle librerie disponibili in SIS e si commentino i risultati ottenuti
 in diverse modalità di sintesi.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Per poter effettuare tale esercizio, rispettando i requisiti forniti (per
 poterlo confrontare con procedure esatte manuali) , è stato necessario
 suddividere la descrizione delle tre uscite in di tre file blif separati.
 Tale operazione si è resa necessaria in quanto il comando 
\shape italic
simplify
\shape default
 di SIS,
\shape italic
 
\shape default
nel procedere alla minimizzazione di una rete combinatoria multilivello
 e multiuscita, utilizza anche trasformazioni globali come ad esempio 
\shape italic
substitute
\shape default
 che permette di sostituire espressioni già utilizzate in dei nodi del 
\series bold
DAG
\series default
 tale operezione ai fini della minimizzazione è ottima ma è difficile da
 realizzare manualmente.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Si riportano i risultati ottenuti con lo strumento SIS: si è stampata la
 funzione non semplificata usando 
\shape italic
write_eqn
\shape default
 (fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIS_print_stats"
plural "false"
caps "false"
noprefix "false"

\end_inset

) e poi si è proceduto alla minimizzazione tramite comando 
\shape italic
simplify
\shape default
 delle uscite separate (fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIS_simplify"
plural "false"
caps "false"
noprefix "false"

\end_inset

)
\shape italic
.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/print_stats.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIS_print_stats"

\end_inset

Stampa della funzione non semplificata in SIS.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/simplify.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIS_simplify"

\end_inset

Stampa della uscite semplificate separatamente in SIS.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tra il comando 
\shape italic
print_stats 
\shape default
è possibile osservare come i numero di letterali sia sceso da 132 a 60 per
 Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 e da 204 a 96 per Y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

.
 Per quanto riguarda Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

, invece, lo strumento SIS non è stato in grado di ridurre il numero di
 letterali, dunque la funzione è già in forma minima.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
2
\end_layout

\end_inset


\series default
= X3*X2*X1*X0 + X4*X2*X1*X0 + X4*X3*X1*X0 + X4*X3*X2*X0 + X4*X3*X2*X1 +
 X5*X2*X1*X0 + X5*X3*X1*X0 + X5*X3*X2*X0 + X5*X3*X2*X1 + X5*X4*X1*X0 + X5*X4*X2*
X0 + X5*X4*X2*X1 + X5*X4*X3*X0 + X5*X4*X3*X1 + X5*X4*X3*X2
\end_layout

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
1
\end_layout

\end_inset


\series default
= !X5*!X4*!X3*X2*X0 + X5*!X4*X3*!X2*!X0 + !X4*!X3*X2*X1*!X0 + !X5*X3*!X2*!X1*X0
 + !X5*X4*!X2*X1*!X0 + !X4*!X3*X2*!X1*X0 + !X5*!X4*X3*X1*!X0 + !X5*!X4*!X2*X1*X0
 + X5*!X3*X2*!X1*!X0 + X5*!X4*!X3*!X2*X1 + !X5*X4*X3*!X1*!X0 + X5*X4*!X2*!X1*!X0
 + X5*!X4*!X2*!X1*X0 + !X5*X4*!X3*!X2*X0 + !X5*X4*!X3*X2*!X1 + !X4*X3*X2*!X1*!X0
 + !X5*!X4*X2*!X1*X0 + !X5*X4*!X3*X2*!X0 + X5*X4*X3*X2*X1*X0
\end_layout

\begin_layout Plain Layout

\series bold
Y
\begin_inset script subscript

\begin_layout Plain Layout

\series bold
0
\end_layout

\end_inset

= 
\series default
!X5*!X4*!X3*!X2*!X1*X0 + !X5*!X4*!X3*!X2*X1*!X0 + !X5*!X4*!X3*X2*!X1*!X0
 + !X5*!X4*!X3*X2*X1*X0 + !X5*!X4*X3*!X2*!X1*!X0 + !X5*!X4*X3*!X2*X1*X0
 + !X5*!X4*X3*X2*!X1*X0 + !X5*!X4*X3*X2*X1*!X0 + !X5*X4*!X3*!X2*!X1*!X0
 + !X5*X4*!X3*!X2*X1*X0 + !X5*X4*!X3*X2*!X1*X0 + !X5*X4*!X3*X2*X1*!X0 +
 !X5*X4*X3*!X2*!X1*X0 + !X5*X4*X3*!X2*X1*!X0 + !X5*X4*X3*X2*!X1*!X0 + !X5*X4*X3*
X2*X1*X0 + X5*!X4*!X3*!X2*!X1*!X0 + X5*!X4*!X3*!X2*X1*X0 + X5*!X4*!X3*X2*!X1*X0
 + X5*!X4*!X3*X2*X1*!X0 + X5*!X4*X3*!X2*!X1*X0 + X5*!X4*X3*!X2*X1*!X0 +
 X5*!X4*X3*X2*!X1*!X0 + X5*!X4*X3*X2*X1*X0 + X5*X4*!X3*!X2*!X1*X0 + X5*X4*!X3*!X
2*X1*!X0 + X5*X4*!X3*X2*!X1*!X0 + X5*X4*!X3*X2*X1*X0 + X5*X4*X3*!X2*!X1*!X0
 + X5*X4*X3*!X2*X1*X0 + X5*X4*X3*X2*!X1*X0 + X5*X4*X3*X2*X1*!X0
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per quanto concerne la procedura di minimizzazione manuale, si è utilizzato
 il metodo di 
\series bold
Mc-Cluskey
\series default
 sulle tre uscite separate.
 Confrontando le due soluzioni, si è notato che i numeri di letterali ottenuti
 in entrambi i casi sono coerenti tra loro.
 Si è inoltre notato come l'uscita Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 ancora una volta non sia stata alterata durante il processo di minimizzazione,
 a differenza delle altre due uscite che risultano notevolmente ridotte
 in entrambi i casi.
 Ciò è perfettamente compatibile con il risultato ottenibile attraverso
 Mc-Cluskey (fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mc-cluskey"
plural "false"
caps "false"
noprefix "false"

\end_inset

), dove si nota chiaramente che per l'uscita Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 non vengono generati consensi: questo è dovuto al fatto che non ci siano
 classi adiacenti aventi distanza di Hamming pari a 1, pertanto è impossibile
 che vengano generati consensi.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/tabella_consensi_y0.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:mc-cluskey"

\end_inset

Minimizzazione di Y
\begin_inset script subscript

\begin_layout Plain Layout
0 
\end_layout

\end_inset

con Mc-Cluskey.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per il mapping tecnologico, si è utilizzata la libreria 
\shape italic
mcnc.genlib
\shape default
, contenente le caratteristiche di ogni porta in termini di equazioni, area
 e ritardi.
 Come riportato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, sono stati effettuati diversi esperimenti variando la funzione di costo
 rispetto alla quale viene ottimizzata in base alla tecnologia scelta per
 il mapping.
 Ciò è stato fatto utilizzando l’opzione 
\series bold
–m
\series default
 del comando 
\series bold
map
\series default
: in particolare, con -m 1 si è preferito ottimizzare il ritardo, con -m
 0 l'area, mentre con -m 0.5 si è effettuata un mapping più bilanciato.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/mapping.png
	scale 170

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:mapping"

\end_inset

Mapping tecnologico effettuato tramite libreria 
\shape italic
mcnc.genlib
\shape default
 fornendo come parametri di bilanciamento, rispettivamente, 1, 0 e 0.5.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I risultati ottenuti sono perfettamente coerenti con quanto stabilito: nel
 primo caso, ottimizzando il ritardo, lo slack negativo totale è di -41.13,
 ma l'area totale risulta essere 196.
 Nel secondo caso invece, ottimizzando l'area, questa risulta essere scesa
 a 159, ma lo slack negativo totale raggiunge -53.00.
 Nel terzo caso infine, dove si è scelta una mediazione tra tempo e area,
 si è ottenuta una rete la cui area e slack negativo totale si assestano
 ad un valore 
\begin_inset Quotes eld
\end_inset

intermedio
\begin_inset Quotes erd
\end_inset

 rispetto ai due casi precedenti: in particolare, la rete avrà un'area di
 169 e uno slack negativo totale pari a -46.50.
\end_layout

\begin_layout Subsection
Esercizio 3
\end_layout

\begin_layout Standard
Si calcoli la forma minima della macchina M come rete multi-uscita utilizzando
 lo strumento SIS e si disegni il grafo corrispondente.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Per effettuare quest'operazione è stato possibile scegliere tra i diversi
 algoritmi visti a lezione in grado di minimizzare una funzione a due livelli
 multiuscita, utilizzando lo strumento automatico 
\series bold
SIS
\series default
, fornendoci una funzione a due livelli o multilivello.
 Si è deciso di utilizzare lo script 
\shape italic
rugged.script
\shape default
, in grado di operare sia su funzioni multilivello che a due livelli applicando
 una serie di trasformazioni prestabilite e fornendo, in uscita, una funzione
 multilivello che ben si presta alla rappresentazione grafica mediante grafo.
 In fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rugged_script"
plural "false"
caps "false"
noprefix "false"

\end_inset

 è possibile osservare il risultato.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/rugged_script.png
	scale 200

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:rugged_script"

\end_inset

Risultato della minimizzazione con 
\shape italic
rugged.script
\shape default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si noti come minimizzando tutte le uscite contemporaneamente, e dunque grazie
 al riutilizzo di alcuni dei nodi della rete per la realizzazione di più
 uscite, il numero totale di letterali sia sceso a 59, mentre nel caso della
 minimizzazione delle uscite separate si erano ottenuti 60, 96 e 192 letterali
 rispettivamente per Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

, Y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 e Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Il grafo ottenuto da questo risultato è consultabile in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:grafo_rugged_script"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/grafo_rugged_script.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:grafo_rugged_script"

\end_inset

Grafo della funzione minimizzata tramite 
\shape italic
rugged.script
\shape default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Esercizio 4
\end_layout

\begin_layout Standard
Si implementi la macchina M, nella forma ottenuta al punto 3, in VHDL seguendo
 una modalità di descrizione di tipo “data-flow”.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Di seguito è riportata l'implementazione in VHDL della macchina M.
 Si noti come, descrivendo la macchina in modalità data-flow, sono stati
 riportati i nodi forniti da 
\shape italic
rugged.script 
\shape default
come segnali d'appoggio da utilizzare per la realizzazione di Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

, Y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 e Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

.
 Sono stati inoltre utilizzati dei segnali temporanei d'uscita 
\shape italic
y2_temp
\shape default
, 
\shape italic
y1_temp
\shape default
 e 
\shape italic
y0_temp
\shape default
 per permettere la definizione di Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 in funzione di Y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 e di Y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 in funzione di Y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

.
 Il codice è disponibile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio01/design/M_dataflow.vhd}{%
\end_layout

\begin_layout Plain Layout

M
\backslash
_dataflow.vhd}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Si è poi proceduto alla realizzazione di un 
\shape italic
testbench 
\shape default
per simulare la macchina tramite il tool 
\shape italic
GHDL
\shape default
.
 In tale testbench, i sei ingressi vengono portati da 0 ad 1 a distanza
 di 10 ns da una transizione all'altra.
 Il risultato è visibile in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:M_simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/M_simulation.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:M_simulation"

\end_inset

Simulazione della macchina M in 
\shape italic
gtkwave
\shape default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Esercizio 5
\end_layout

\begin_layout Standard
Si progetti la macchina M per composizione di macchine a partire da blocchi
 full-adder, e si implementi la soluzione trovata in VHDL.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Ricordando che un full-adder è in grado di sommare 3 bit riportando in uscita
 il bit meno significativo s
\begin_inset script subscript

\begin_layout Plain Layout
i
\end_layout

\end_inset

 e quello più significativo r
\begin_inset script subscript

\begin_layout Plain Layout
i
\end_layout

\end_inset

, possiamo procedere come segue: scomponendo la somma di 6 bit in due somme
 di 3 bit, effettuabili tramite 2 full-adder, otterremo due somme parziali
 s
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 e s
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 che andranno a loro volta sommate tra loro per ottenere il bit meno significati
vo dell'uscita y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

.
 Per quanto riguarda i riporti r
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 e r
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

, aventi entrambi peso 1, questi andranno sommati tra loro tenendo anche
 conto del riporto ottenuto calcolando y
\begin_inset script subscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 (ossia r
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

, di peso 1).
 Il risultato di questa ultima operazione di somma sarà la cifra di peso
 1 (y
\begin_inset script subscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

) della nostra soluzione, mentre il riporto sarà la cifra di peso 2 (y
\begin_inset script subscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

).
 Usando dunque 4 full-adder, lo schema ottenuto è consultabile in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:full_adder_implementation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/full_adder_implementaion.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:full_adder_implementation"

\end_inset

Schema della macchina M a partire da blocchi full-adder.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Per quanto concerne l'implementazione in VHDL, si è dapprima proceduto all'imple
mentazione di un full-adder seguendo una modalità di descrizione di tipo
 “behavioural”.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Implementazione in VHDL di un full-adde
r.}]
\end_layout

\begin_layout Plain Layout

entity full_adder is
\end_layout

\begin_layout Plain Layout

Port (  X   : in  STD_LOGIC;
\end_layout

\begin_layout Plain Layout

		Y   : in  STD_LOGIC;
\end_layout

\begin_layout Plain Layout

		CIN : in  STD_LOGIC;
\end_layout

\begin_layout Plain Layout

		S   : out STD_LOGIC;
\end_layout

\begin_layout Plain Layout

		C   : out STD_LOGIC
\end_layout

\begin_layout Plain Layout

	);
\end_layout

\begin_layout Plain Layout

end full_adder;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

architecture dataflow of full_adder is
\end_layout

\begin_layout Plain Layout

	begin
\end_layout

\begin_layout Plain Layout

		S <=  (X xor Y xor CIN);
\end_layout

\begin_layout Plain Layout

		C <=  ((X and Y) or ((X xor Y) and CIN));
\end_layout

\begin_layout Plain Layout

	end dataflow;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Dopodiché, utilizzando questi componenti, si è proceduto a costruire la
 macchina M seguendo una modalità di descrizione di tipo “structural”.
 Il codice è visualizzabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio01/design/M.vhd}{%
\end_layout

\begin_layout Plain Layout

M.vhd}
\end_layout

\end_inset

.
 Il risultato della simulazione è analogo a quello dell'esercizio 4.
\end_layout

\begin_layout Subsection
Esercizio 6
\end_layout

\begin_layout Standard
Si progetti una macchina S che, date 6 stringhe di 3 bit ciascuna in ingresso
 (A, B, C, D, E, F), rappresentanti la codifica binaria di numeri interi
 positivi, ne calcoli la somma W espressa su 6 bit.
 La macchina S deve essere progettata per composizione di macchine utilizzando
 la macchina M progettata al punto 5) e componenti full-adder, opportunamente
 collegati.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Come descritto nell'esercizio 5, la macchina M è in grado di determinare,
 dati 6 bit in ingresso, il numero di bit alti.
 Dal momento che si può considerare tale macchina come sommatore in grado
 di sommare 6 bit, si è deciso di utilizzarla per sommare tra loro le cifre
 dello stesso peso delle 6 stringhe fornite in ingresso alla macchina S.
 Essendo tali stringhe composte da 3 bit ciascuna (di peso 2, 1 e 0), si
 è scelto di usare 3 macchine M per sommare le cifre di stesso peso tra
 loro.
 Una volta ottenute tali somme (ciascuna, rispettivamente, espressa su 3
 bit in codifica binaria), si è proceduto con tali osservazioni: il bit
 di peso 0 della somma dei 6 bit di peso 0 non è altro che la cifra di peso
 0 del risultato della macchina S, ossia della somma delle 6 stringhe.
 Il bit di peso 1 della stessa somma, invece, rappresenta invece un bit
 di peso 1 della somma totale delle stringhe, e lo stesso ragionamento è
 valido per il bit di peso 2.
 Passando alla somma dei 6 bit di peso 1 delle stringhe di partenza, si
 noti come la cifra di peso 0 di tale somma non è altro che un bit di peso
 1 della somma totale delle stringhe, mentree la cifra di peso 1 è un bit
 di peso 2 per la somma totale, e così via.
\end_layout

\begin_layout Standard
Seguendo questo ragionamento, è stato possibile combinare le cifre delle
 somme di peso analogo utilizzando dei full-adder, ottenendo lo schema consultab
ile in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:S"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/S_design.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:S"

\end_inset

Schema della macchina S.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopodiché si è proceduto alla sua realizzazione in VHDL utilizzando una
 modalità di descrizione 
\begin_inset Quotes eld
\end_inset

structural
\begin_inset Quotes erd
\end_inset

.
 Il codice è visualizzabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio01/design/S.vhd}{%
\end_layout

\begin_layout Plain Layout

S.vhd}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Il risultato della simulazione è riportato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:S_simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/soluzione/S_simulation.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:S_simulation"

\end_inset

Risultato della simulazione della macchina S.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
