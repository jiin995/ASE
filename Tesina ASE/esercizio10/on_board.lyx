#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Approfondimento: Carry Select AddSub on board
\end_layout

\begin_layout Standard
Tra i vari addizionatori presentati, abbiamo deciso di sintetizzare sulla
 board il Carry Select.
 In particolare, ricordando che l'FPGA è pensata per sintetizzare macchine
 sincrone, si è realizzata una top level entity che utilizza dei registri
 per sostenere gli input in ingresso all'addizionatore e per sostenere il
 valore in ingresso alla batteria di display a 7 segmenti presenti sulla
 board.
 Si è inoltre deciso di sintetizzare sulla board la versione AddSub, in
 grado di effettuare l'operazione di sottrazione calcolando il complemento
 a due del secondo operando, in modo analogo a quanto visto per il Ripple
 Carry Adder.
 L'interfaccia della top level entity è la seguente:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Interfaccia della top level entity.}]
\end_layout

\begin_layout Plain Layout

entity carrySelect_addSub_onBoard is    
\end_layout

\begin_layout Plain Layout

			generic  (  M       : NATURAL :=  4;     
\end_layout

\begin_layout Plain Layout

			            P       : NATURAL :=  4     
\end_layout

\begin_layout Plain Layout

			);     
\end_layout

\begin_layout Plain Layout

			port 	(  clock 	  : in    STD_LOGIC ; 				
\end_layout

\begin_layout Plain Layout

						enable_a    : in	STD_LOGIC ; 			
\end_layout

\begin_layout Plain Layout

						enable_b	: in    STD_LOGIC ;             
\end_layout

\begin_layout Plain Layout

						subtract    : in    STD_LOGIC ; 				
\end_layout

\begin_layout Plain Layout

						input       : in    STD_LOGIC_VECTOR (((M*P)-1) downto 0) ; 			
\end_layout

\begin_layout Plain Layout

						overflow    : out   STD_LOGIC ;             
\end_layout

\begin_layout Plain Layout

						c_out       : out   STD_LOGIC ; 				
\end_layout

\begin_layout Plain Layout

						anodes 	 : out   STD_LOGIC_VECTOR (7 downto 0) ; 			
\end_layout

\begin_layout Plain Layout

						cathodes	: out   STD_LOGIC_VECTOR (7 downto 0)                   
           
\end_layout

\begin_layout Plain Layout

		    );
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dal momento che la board dispone di soli 16 switch per definire gli ingressi,
 non è possibile inserire contemporaneamente entrambi gli operandi.
 Per risolvere tale limite, si è deciso di adottare la seguente logica:
 dal momento che le stringhe in ingresso sono sostenute da due registri
 con parallelismo di 16 bit, abbiamo mappato l'ingresso di entrambi i registri
 agli stessi 16 switch, mentre i loro segnali di abilitazione sono mappati
 su due diversi pulsanti della board.

\shape italic
 
\shape default
Pertanto, per effettuare un'addizione, bisognerà usare gli switch per impostare
 i singoli operandi e premere i corrispettivi pulsanti per caricare i due
 valori nei registri.
 Dopo pochi instanti, sarà disponibile sul display a 7 segmenti il risultato
 dell'operazione.
 Inoltre, se il led 15 sarà acceso, significherà che durante l'operazione
 si è verificato un overflow.
 Per effettuare una sottrazione invece basterà premere il pulsante centrale
 sull'FPGA a cui è stato mappato l'ingresso 
\shape italic
subtract
\shape default
: in questo modo si ordinerà all'addizionatore di complementare il secondo
 operando e quindi di fare la sottrazione tra il primo operando e il secondo.
 Di seguito è riportato il mapping dei pulsanti e dei led con l'I/O del
 componente di alto livello:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Mapping dei pulsanti e dei led.}]
\end_layout

\begin_layout Plain Layout

# bottone centrale
\end_layout

\begin_layout Plain Layout

NET "subtract"           LOC=N17 | IOSTANDARD=LVCMOS33; #IO_L9P_T1_DQS_14
 
\end_layout

\begin_layout Plain Layout

# bottone sinistro
\end_layout

\begin_layout Plain Layout

NET "enable_a"           LOC=P17 | IOSTANDARD=LVCMOS33; #IO_L12P_T1_MRCC_14
 
\end_layout

\begin_layout Plain Layout

# bottone destro 
\end_layout

\begin_layout Plain Layout

NET "enable_b"           LOC=M17 | IOSTANDARD=LVCMOS33; #IO_L10N_T1_D15_14#
 led 0 
\end_layout

\begin_layout Plain Layout

NET "c_out"	          LOC=H17 | IOSTANDARD=LVCMOS33; #IO_L18P_T2_A24_15
 
\end_layout

\begin_layout Plain Layout

#led 15 
\end_layout

\begin_layout Plain Layout

NET "overflow"           LOC=V11 | IOSTANDARD=LVCMOS33; #IO_L21N_T3_DQS_A06_D22_
14
\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
L'implementazione completa del Carry Select AddSub è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio10/design/carrySelect_addSub.vhd}{%
\end_layout

\begin_layout Plain Layout

carrySelect
\backslash
_addSub.vhd}
\end_layout

\end_inset

.
 L'implementazione completa della top level entity è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio10/design/carrySelect_addSub_on_board.vhd}{%
\end_layout

\begin_layout Plain Layout

carrySelect
\backslash
_addSub
\backslash
_on
\backslash
_board.vhd}
\end_layout

\end_inset

.
\end_layout

\end_body
\end_document
