#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{tikzpicture}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Implementazione
\end_layout

\begin_layout Subsection
Implementazione con descrizione a doppio processo (Moore)
\end_layout

\begin_layout Standard
Si è deciso di realizzare una macchina di Moore per il riconoscimento della
 sequenza '1011001'.
 L'automa a stati finiti realizzato è rappresentato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:automa-moore"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/automa_moore.svg
	scale 35
	BoundingBox 0bp 150bp 800bp 550bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:automa-moore"

\end_inset

Automa a stati finiti della macchina (Moore).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per l'implementazione di questo automa in VHDL, si è deciso di utilizzare
 una descrizione di tipo behavioural.
 In particolare, si è utilizzata la tecnica con due processi:
\end_layout

\begin_layout Itemize

\shape italic
update_state
\shape default
, che si occupa di aggiornare lo stato corrente ad ogni colpo di clock;
\end_layout

\begin_layout Itemize

\shape italic
choose_next_state
\shape default
, che rappresenta la parte combinatoria della macchina, atta a determinare
 lo stato prossimo e l'uscita usando un costrutto 
\shape italic
case
\shape default
;
\end_layout

\begin_layout Standard
Tale scelta, sebbene renda il codice meno compatto, risulta più facilmente
 leggibile nella parte di determinazione dello stato prossimo.
 Si noti come, essendo questa una macchina di Moore, la determinazione dell'usci
ta dipende solamente dallo stato in cui si trova la macchina: in particolare,
 come osservabile anche nel codice, l'uscita sarà alta solamente quando
 la macchina avrà rilevato l'intera stringa.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL,caption={Determinazione dell'uscita in VHDL
 (Moore).}]
\end_layout

\begin_layout Plain Layout

WHEN s => s1011001
\end_layout

\begin_layout Plain Layout

	z <= '1';
\end_layout

\begin_layout Plain Layout

	IF x = '1' THEN next_state <= init;
\end_layout

\begin_layout Plain Layout

	ELSE next_state <= s1;
\end_layout

\begin_layout Plain Layout

	END IF;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\backslash
selectlanguage{italian}%
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'implementazione completa è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio06/design/fsm_moore.vhd}{%
\end_layout

\begin_layout Plain Layout

fsm
\backslash
_moore.vhd}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementazione con guardie (Mealy)
\end_layout

\begin_layout Standard
Si è deciso di realizzare tale macchina anche come Mealy: in particolare,
 dal momento che in questa implementazione l'uscita dipende direttamente
 dall'ingresso, il valore in uscita sarà 1 quando, trovandoci nello stato
 s101100, si riceve in ingresso il valore 1.
 Fatto ciò, è stato dunque possibile rimuovere lo stato s1011001 ed aggiungere
 due transizioni da s101100 a init e s1 a fronte degli ingressi 0 e 1.
 L'automa a stati finiti realizzato è rappresentato in fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:automa-mealy"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement ph
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/automa_mealy.svg
	scale 35
	BoundingBox 0bp 150bp 800bp 550bp
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:automa-mealy"

\end_inset

Automa a stati finiti della macchina (Mealy).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per l'implementazione di questo automa in VHDL, si è ricorso all'utilizzo
 di costrutti di assegnazione con guardia e funzione di risoluzione.
 L'implementazione completa è consultabile qui: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
href{run:./esercizio06/design/fsm_mealy.vhd}{%
\end_layout

\begin_layout Plain Layout

fsm
\backslash
_mealy.vhd}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
