#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
% LOGO
\usepackage{eso-pic,graphicx}
\makeatletter
\newcommand\BackgroundPicture[2]{
\setlength{\unitlength}{1pt}
\put(0,\strip@pt\paperheight){
\parbox[t][\paperheight]{\paperwidth}{
\vfill
\centering\includegraphics[angle=#2]{#1}
\vfill
}
}
}
\makeatother
%Per i marigini
\sloppy

\usepackage{pgfplots} 
\usepackage{tikz} 
\pgfplotsset{compat=1.8} 
\usepackage{pgfplotstable} 
\usepgfplotslibrary{groupplots}
\usepackage{float}
\usepackage[export]{adjustbox}
\usepackage{graphicx}

\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}

\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} % cancella tutti i campi
\fancyfoot{} % cancella tutti i campi

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Elaborato di ASE: Architettura dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}
\cfoot{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Utilizzare questo file per generare il pdf dell'intera tesina
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frontmatter}
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{Roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Modificare il numero del gruppo nel tag title
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{Tesina di Architettura dei Sistemi di Elaborazione 
\backslash

\backslash
Gruppo 14} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Modificare il nome dei componenti del gruppo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Gabriele Previtera - Mat.
 M63/000834
\end_layout

\begin_layout Plain Layout


\backslash
and Mirko Pennone - Mat.
 M63/000858
\end_layout

\begin_layout Plain Layout


\backslash
and Simone Penna - Mat.
 M63/000876
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frontmatter}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{mainmatter}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Copiare l'input per ogni esercizio svolto in modo da includerlo nel PDF
 della tesina.
 Modificare il path come di seguito:
\end_layout

\begin_layout Plain Layout
esercizio01/Tesina.lyx ->esercizio02/Tesina.lyx e così via.
 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Sintesi di macchine combinatorie
\end_layout

\begin_layout Standard
Eseguire gli esercizi riportati nella traccia Esercitazioni/Esercizi proposti/Es
ercitazione macchine combinatorie.pdf nell'area FTP.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio01/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Latch e Flip-Flop
\end_layout

\begin_layout Standard
Sviluppare i circuiti illustrati nel documento sui flip-flop.
 Eseguire per ciascun esercizio una simulazione comportamentale e post-sintesi,
 illustrando i passaggi salienti.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio02/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Display a 7 segmenti
\end_layout

\begin_layout Standard
Illustrare la realizzazione di un'architettura che consenta di mostrare
 su un array di 4 display a 7 segmenti un valore intero.
 Tale puo essere una parola da 16 bit, composta cioè di 4 cifre esadecimali,
 ciascuna espressa su di un nibble (4 bit).
 Sviluppare la traccia discutendo l'approccio di design adottato.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio03/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Clock generator
\end_layout

\begin_layout Standard
Sviluppare un progetto di sintesi di un DCM.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio04/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Scan Chain
\end_layout

\begin_layout Standard
Progettare una rete composta da una serie di N Flip Flop D abilitati ad
 operare nei seguenti due modi:
\end_layout

\begin_layout Enumerate
Modalità normale: l'array si comporta come un registro di N posizioni;
\end_layout

\begin_layout Enumerate
Modalità controllo: i flip-flop possono essere scritti e letti individualmente
 configurandoli in cascata come uno shift register.
\end_layout

\begin_layout Standard
Utilizzare una rete di controllo in grado di alimentare il primo stadio
 con un valore e generare tanti colpi di clock quanto è la distanza del
 primo stadio dalla cella da raggiungere.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio05/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Finite State Machine
\end_layout

\begin_layout Enumerate
Realizzare un riconoscitore di una generica sequenza a N bit (e.g.
 1011001) in VHDL utilizzando dapprima la descrizione behavioral a singolo
 o doppio processo (opzionale: poi i costrutti con guardia e simulare con
 GHDL).
\end_layout

\begin_layout Enumerate
A partire dal riconoscitore di sequenza realizzato al punto 1 con i costrutti
 behavioral a singolo o doppio processo del VHDL, sintetizzare la macchina
 1 specificando al tool di sintesi Xilinx ISE diverse codifiche per gli
 stati.
 Per quelle rilevanti estrapolare la codica assegnata dal sintetizzatore,
 area occupata e frequenza massima di lavoro, apportando eventuali commenti.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio06/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Ripple Carry Adder
\end_layout

\begin_layout Standard
Realizzare un'architettura di tipo Ripple Carry per un sommatore ad N bit
 generico.
 Il circuito deve essere realizzato a partire da blocchi di Full Adder,
 espresso mediante porte logiche XOR/AND/OR.
 Riportare considerazioni sull'area occupata e tempo di calcolo al variare
 di N e commentare il risultato con le formule teoriche.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio07/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Carry Look Ahead
\end_layout

\begin_layout Standard
Realizzare un'architettura di tipo Carry Look Ahead per un sommatore ad
 8 bit.
 Il circuito deve essere realizzato a partire dai blocchi:
\end_layout

\begin_layout Enumerate
Propagation/Generation calculator
\end_layout

\begin_layout Enumerate
Carry Look Ahead
\end_layout

\begin_layout Enumerate
Full Adder
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
(opzionale: rendere il CLA generico.)
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio08/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Carry Save
\end_layout

\begin_layout Standard
Realizzare un esempio di addizionatore basato sulla modalità Carry Save.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio09/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Carry Select
\end_layout

\begin_layout Standard
Realizzare un sommatore Carry Select generico ad N bit.
 Il circuito deve essere realizzato a partire da blocchi di Full Adder,
 espresso mediante porte logiche XOR/AND/OR.
 Riportare considerazioni sull'area occupata e tempo di calcolo al variare
 di N e commentare il risultato con le formule teoriche.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio10/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Moltiplicatori
\end_layout

\begin_layout Enumerate
Realizzare in VHDL un circuito di moltiplicazione a celle MAC di N bit.
 La cella MAC deve contenere un Full Adder (descritto già in esercizi precedenti
) ed una porta AND per la moltiplicazione parziale.
 Tale cella deve essere replicata in una struttura ordinata (per righe e
 colonne) per comporre il circuito intero di moltiplicazione.
 Effettuare considerazioni di occupazione di area e di tempi di propagazione
 dei segnali al variare di N per valori significativi, apportando eventuali
 commenti salienti.
\end_layout

\begin_layout Enumerate
(ozionale se si fa il 3) Realizzare in hardware l'algoritmo della moltiplicazion
e secondo Robertson per operandi ad 8 bit.
 L'architettura deve essere realizzata sulla base dello schema di progettazione
 PO/PC (Parte Operativa e Parte di Controllo).
\end_layout

\begin_layout Enumerate
(opzionale se si fa il 2) Realizzare in hardware l'algoritmo della moltiplicazio
ne secondo Booth per operandi ad 8 bit.
 L'architettura deve essere realizzata sulla base dello schema di progettazione
 PO/PC (Parte Operativa e Parte di Controllo).
\end_layout

\begin_layout Enumerate
(opzionale) Realizzare in VHDL un circuito per la moltiplicazione con la
 struttura di somma per righe, oppure somma per colonne oppure somma per
 diagonale.
 Discutere l'architettura al variare di N.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio11/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
Divisori
\end_layout

\begin_layout Standard
Nota: degli esercizi 1 e 2 occorre farne almeno uno, mentre l'altro è lasciato
 opzionale.
\end_layout

\begin_layout Enumerate
Realizzare in hardware l'algoritmo della divisione Restoring per operandi
 ad 8 bit.
 L'architettura deve essere realizzata sulla base dello schema di progettazione
 PO/PC (Parte Operativa e Parte di Controllo).
\end_layout

\begin_layout Enumerate
Realizzare in hardware l'algoritmo della divisione Non Restoring per operandi
 ad 8 bit.
 L'architettura deve essere realizzata sulla base dello schema di progettazione
 PO/PC (Parte Operativa e Parte di Controllo).
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio12/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
UART
\end_layout

\begin_layout Standard
Realizzare un dispositivo VHDL che implementa il protocollo UART (a partire
 da quello diffuso dalla Digilent).
 Collegare internamente, oppure tramite interfaccia fisica esterna alla
 board stessa, ad un'altra board oppure ad un PC previo utilizzo di un physical
 RS232, due interfacce per trasmette e ricevere ottetti.
 Svolgere l'esercizio riutilizzando il VHDL messo a disposizione da Digilent
 (e disponbile nel materiale del corso) commentando eventuali ristrutturazioni
 del codice.
 (Opzionale) Sviluppare un'architettura per l'implementazione del protocollo
 UART secondo il paradigma PO/PC ex-novo, evidenziando le similarità/dissimilari
tà con il progetto Digilent.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio13/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Chapter
MIC1
\end_layout

\begin_layout Enumerate
Realizzare la sintesi di un'architettura MIC, di cui sono forniti i codici
 VHDL e gli strumenti di sviluppo, completando un ciclo di sviluppo.
 Effettuare, inoltre, la sostituzione del dispositivo per la comunicazione
 UART utilizzando, invece, led e switch delle board FPGA sfruttando le istruzion
i di IN e OUT.
\end_layout

\begin_layout Enumerate
(Opzionale) Fornire l'implementazione di un I/O generico per il quale, dalle
 istruzioni di IN e OUT, è possibile utilizzare uno tra D dispositivi disponibil
i (e.g.
 led, switch, push buttons, UART).
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "esercizio14/Tesina.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{mainmatter}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
